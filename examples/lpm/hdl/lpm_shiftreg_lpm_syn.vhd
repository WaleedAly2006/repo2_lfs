-- VHDL Entity lpm.lpm_shiftreg.symbol
--
-- Created:
--          by - user.group (host.domain)
--          at - 09:12:46 02/18/03
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2003.1
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY lpm;
USE lpm.lpm_components.all;

ENTITY lpm_shiftreg IS
   GENERIC( 
      lpm_WIDTH     : natural;
      lpm_AVALUE    : string := "UNUSED";
      lpm_SVALUE    : string := "UNUSED";
      lpm_PVALUE    : string := "UNUSED";
      lpm_DIRECTION : string := "UNUSED";
      lpm_TYPE      : string := "LPM_SHIFTREG";
      lpm_HINT      : string := "UNUSED"
   );
   PORT( 
      aclr     : IN     std_logic                               := '0';
      aset     : IN     std_logic                               := '0';
      clock    : IN     std_logic;
      data     : IN     std_logic_vector (lpm_WIDTH-1 DOWNTO 0) := (OTHERS => '0');
      enable   : IN     std_logic                               := '1';
      load     : IN     std_logic                               := '0';
      sclr     : IN     std_logic                               := '0';
      shiftin  : IN     std_logic                               := '1';
      sset     : IN     std_logic                               := '0';
      q        : OUT    std_logic_vector (lpm_WIDTH-1 DOWNTO 0);
      shiftout : OUT    std_logic
   );

-- Declarations

END lpm_shiftreg ;


--------------------------------------------------------------------------
--   This VHDL file was developed by Altera Corporation.  It may be
-- freely copied and/or distributed at no cost.  Any persons using this
-- file for any purpose do so at their own risk, and are responsible for
-- the results of such use.  Altera Corporation does not guarantee that
-- this file is complete, correct, or fit for any particular purpose.
-- NO WARRANTY OF ANY KIND IS EXPRESSED OR IMPLIED.  This notice must
-- accompany any copy of this file.
--
--------------------------------------------------------------------------
-- LPM Synthesizable Models (Support string type generic)
-- These models are based on LPM version 220 (EIA-IS103 October 1998).
-------------------------------------------------------------------------
-- Version Quartus v1.1 (lpm 220)      Date 02/01/01
--------------------------------------------------------------------------
architecture lpm_syn of lpm_shiftreg is

signal i_q : std_logic_vector(LPM_WIDTH-1 downto 0) := (OTHERS => '0');
signal INIT : std_logic := '0';
signal i_shiftout_pos : integer := LPM_WIDTH-1;

begin

    process (CLOCK, ACLR, ASET, INIT)
	variable IAVALUE, ISVALUE : integer;
	begin
		-- INITIALIZE TO PVALUE --
		if INIT = '0' then
			if LPM_PVALUE /= "UNUSED" then
                i_q <= conv_std_logic_vector(str_to_int(LPM_PVALUE), LPM_WIDTH);
			end if;
            if LPM_DIRECTION = "LEFT" or LPM_DIRECTION = "UNUSED" then
                i_shiftout_pos <= LPM_WIDTH-1;
            elsif LPM_DIRECTION = "RIGHT" then
                i_shiftout_pos <= 0;
            else
                ASSERT FALSE
                REPORT "Illegal LPM_DIRECTION property value for LPM_SHIFTREG!"
                SEVERITY ERROR;
            end if;
			INIT <= '1';
		elsif ACLR =  '1' then
            i_q <= (OTHERS => '0');
		elsif ASET = '1' then
			if LPM_AVALUE = "UNUSED" then
                i_q <= (OTHERS => '1');
			else
				IAVALUE := str_to_int(LPM_AVALUE);
                i_q <= conv_std_logic_vector(IAVALUE, LPM_WIDTH);
			end if;
		elsif CLOCK'event and CLOCK = '1' then
			if ENABLE = '1' then
				if SCLR = '1' then
                    i_q <= (OTHERS => '0');
				elsif SSET = '1' then
					if LPM_SVALUE = "UNUSED" then
                        i_q <= (OTHERS => '1');
					else
						ISVALUE := str_to_int(LPM_SVALUE);
                        i_q <= conv_std_logic_vector(ISVALUE, LPM_WIDTH);
					end if;
                elsif LOAD = '1' then
                    i_q <= DATA;
                else
                    if LPM_WIDTH < 2 then
                        i_q(0) <= SHIFTIN;
                    elsif LPM_DIRECTION = "LEFT" then
                        i_q <= (i_q(LPM_WIDTH-2 downto 0) & SHIFTIN);
                    else
                        i_q <= (SHIFTIN & i_q(LPM_WIDTH-1 downto 1));
                    end if;
				end if;
			end if;
		end if;
	end process;

    Q <= i_q;
    SHIFTOUT <= i_q(i_shiftout_pos);

end lpm_syn;
