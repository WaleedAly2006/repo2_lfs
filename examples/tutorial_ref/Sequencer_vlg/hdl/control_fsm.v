//
// Module Sequencer_vlg.control.fsm
//
// Created:
//          by - user.group (host.domain)
//          at - 11:05:02 04/12/2005
//
// Generated by Mentor Graphics' HDL Designer(TM) 2005.1
//
`resetall
`timescale 1ns/10ps
module control( 
   clock, 
   reset, 
   clr, 
   inc, 
   ld_A_B, 
   ld_sum
);


// Internal Declarations

input   clock;
input   reset;
output  clr;
output  inc;
output  ld_A_B;
output  ld_sum;


wire clock;
wire reset;
reg clr;
reg inc;
reg ld_A_B;
reg ld_sum;
// Module Declarations

// State encoding
parameter [1:0]
          clr_regs     = 2'd0,
          inc_accb     = 2'd1,
          load_acc_sum = 2'd2,
          load_acc_A_B = 2'd3;

reg [1:0] current_state, next_state;
// pragma state_vector current_state

//-----------------------------------------------------------------
// Next State Block for machine machine0
//-----------------------------------------------------------------
always @(
   current_state
)
begin : next_state_block_proc
   case (current_state) 
      clr_regs: begin
         next_state = inc_accb;
      end
      inc_accb: begin
         next_state = load_acc_sum;
      end
      load_acc_sum: begin
         next_state = load_acc_A_B;
      end
      load_acc_A_B: begin
         next_state = load_acc_sum;
      end
      default: 
         next_state = clr_regs;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine machine0
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   clr = 0;
   inc = 0;
   ld_A_B = 0;
   ld_sum = 0;

   // Combined Actions
   case (current_state) 
      clr_regs: begin
         clr = 1 ;
         inc = 0 ;
         ld_A_B = 0 ;
         ld_sum = 0 ;
      end
      inc_accb: begin
         clr = 0 ;
         inc = 1 ;
      end
      load_acc_sum: begin
         inc = 0 ;
         ld_A_B = 0 ;
         ld_sum = 1 ;
      end
      load_acc_A_B: begin
         ld_A_B = 1 ;
         ld_sum = 0 ;
      end
      default: begin
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine machine0
//-----------------------------------------------------------------
always @(
   posedge clock
) 
begin : clocked_block_proc
   if (reset) begin
      current_state <= clr_regs;
   end
   else 
   begin
      current_state <= next_state;
   end
end // Clocked Block

endmodule // control
