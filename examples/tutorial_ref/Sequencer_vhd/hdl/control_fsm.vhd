-- VHDL Entity Sequencer_vhd.control.interface
--
-- Created:
--          by - user.group (host.domain)
--          at - 10:55:48 04/12/2005
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.1
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY control IS
   PORT( 
      clock  : IN     std_logic;
      reset  : IN     std_logic;
      clr    : OUT    std_logic;
      inc    : OUT    std_logic;
      ld_A_B : OUT    std_logic;
      ld_sum : OUT    std_logic
   );

-- Declarations

END control ;

--
-- VHDL Architecture Sequencer_vhd.control.fsm
--
-- Created:
--          by - user.group (host.domain)
--          at - 10:55:49 04/12/2005
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.1
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF control IS

   TYPE STATE_TYPE IS (
      clr_regs,
      inc_accb,
      load_acc_sum,
      load_acc_A_B
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clock,
      reset
   )
   -----------------------------------------------------------------
   BEGIN
      IF (reset = '1') THEN
         current_state <= clr_regs;
      ELSIF (clock'EVENT AND clock = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN clr_regs => 
            next_state <= inc_accb;
         WHEN inc_accb => 
            next_state <= load_acc_sum;
         WHEN load_acc_sum => 
            next_state <= load_acc_A_B;
         WHEN load_acc_A_B => 
            next_state <= load_acc_sum;
         WHEN OTHERS =>
            next_state <= clr_regs;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      clr <= '0';
      inc <= '0';
      ld_A_B <= '0';
      ld_sum <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN clr_regs => 
            clr <= '1' ;
            inc <= '0' ;
            ld_A_B <= '0' ;
            ld_sum <= '0' ;
         WHEN inc_accb => 
            clr <= '0' ;
            inc <= '1' ;
         WHEN load_acc_sum => 
            inc <= '0' ;
            ld_A_B <= '0' ;
            ld_sum <= '1' ;
         WHEN load_acc_A_B => 
            ld_A_B <= '1' ;
            ld_sum <= '0' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
